#!/bin/bash
#
# create a bash script to navigate to project directory
# open terminal with tmux and execute commands
#
# Usage: tsm.sh [session_name] [commands]
# Author: Gabriel Góes Rocha de Lima
# Date: 2024-01-31
# Version: 0.2.0

# Description: This script will open terminal with tmux and execute commands
# Argumments:
#  session_name: tmux session name
#  class_name: terminal window class name
#  commands: commands to execute in tmux session
#  -h, --help: show help message
#  -e, --example: show example message

SesionNumber=$(($(tmux list-sessions | wc -l)+1))
SESSION_NAME=${1:-$'Session_'$SesionNumber}
CLASS_NAME=$SESSION_NAME
COMANDOS=${2:-'vim .'}

# Add help message
if [[ $1 == "-h" || $1 == "--help" ]]; then
    echo "Usage: tsm.sh [session_name] [commands]"
    echo "Description: This script will open terminal with tmux and execute commands"
    echo "Argumments:"
    echo "  session_name: tmux session name"
    echo "  commands: commands to execute in tmux session"
    echo "  -h, --help: show help message"
    echo "  -e, --example: show example message"
    exit 0
fi

# Add example message
if [[ $1 == "-e" || $1 == "--example" ]]; then
   echo "Example: tsm.sh my_session 'cd ~/my_project' 'vim .'"
   exit 0
fi

# Checa se existe sessão chamada $SESSION_NAME
if tmux has-session -t $SESSION_NAME 2>/dev/null; then
    # Se existir, verifica se está attached
    if ! tmux list-sessions -F "#{session_name}:#{session_attached}" | grep -q "^$SESSION_NAME:1$"; then
        # Se não estiver attached, attach à sessão
        alacritty --class $CLASS_NAME -e bash -c "tmux attach-session -t $SESSION_NAME"
    else
        # Se estiver attached, foca na janela com i3-wm
        # Pega o workspace da janela $CLASS_NAME
        WORKSPACE=$(i3-msg -t get_workspaces | jq '.[] | select(.name == "'$CLASS_NAME'") | .num')
        # Foca no workspace e na janela
        i3-msg workspace $WORKSPACE && i3-msg [class="$CLASS_NAME"] focus
    fi
else
    # Se não existir, cria uma nova sessão
    # Abre terminal com $CLASS_NAME com tmux $SESSION_NAME, executa $COMANDOS e attach à sessão
    alacritty -T $CLASS_NAME -e bash -c "tmux new-session -s $SESSION_NAME -d &&
        tmux send-keys -t $SESSION_NAME '$COMANDOS' C-m &&
        tmux attach-session -t $SESSION_NAME"
fi
